"""
This module contains the script used to compute the Jaccard measure
between two model counterfactuals.

The Jaccard measure, or Jaccard similarity coefficient,
is a statistic used for comparing the similarity and diversity of sample sets.
This module uses this measure to compare the counterfactuals generated by two different models.
"""

import sys
import os
import pandas as pd
from lib.timer import Timer
from lib.data_preprocessor import DataPreprocessor
from lib.classifier import Classifier
from lib.jaccard_evaluer import JaccardEvaluer
from lib.utils.path import PATH, CLASSIFIERS, PREP_METHOD, DIR
from lib.utils.attribute_specifications import ATTRIBUTES, CLASS_LABELS, DATA_LABELS

# Start timing
timer = Timer()
timer.start()

# Load the dataset
dataset = pd.read_csv(PATH['dataset'])

# Preprocess the dataset
dp = DataPreprocessor(dataset)
dataset = dp.preprocess()

# Divide dataset in features and targets
class_columns = [ATTRIBUTES[sample] for sample in iter(CLASS_LABELS)]
data_columns = [ATTRIBUTES[sample] for sample in iter(DATA_LABELS)]
X = dataset.drop(columns=class_columns, axis=1)
y = dataset[class_columns]

# Load models
clfs = []
for model_type in CLASSIFIERS:
    c = Classifier(dataset, model_type)
    clfs.append(c)
    if not c.load_config():
        print(f'ERROR: Model not found for {model_type} with {PREP_METHOD} '
              'pre-processing method, please execute "model_generation.py" before.')
        timer.end()
        sys.exit(1)
print('Models successfully loaded.')

# Compute Jaccard values
j = JaccardEvaluer(
    data={'dataset': dataset, 'X': X, 'y': y},
    path=os.path.join(DIR['raw_data'], 'jaccard_indexes.csv')
)
j.sample_data()
j.compute_jaccard(clfs=clfs)

# Plotting results
j.plot_jaccard_hist(
    clfs=clfs,
    path=os.path.join('img', 'jaccard_measure', 'jaccard_indexes_histogram.png')
)
j.plot_feature_importance(
    clfs=clfs,
    path=os.path.join('img', 'jaccard_measure', 'features_importance.png')
)

# End timing
timer.end()
